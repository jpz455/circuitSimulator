@startuml
'https://plantuml.com/class-diagram

skinparam ClassBackgroundColor #PaleTurquoise

class Circuit{
    +name: str
    +buses: Dict[str, Bus]
    +busRef: List[str]
    +transformers: Dict[str, Transformer]
    +geometries: Dict[str, Geometry]
    +conductors: Dict[str, Conductor]
    +transmission_lines: Dict[str, TransmissionLine]
    +loads: Dict[str, Load]
    +generators: Dict[str, Generator]
    +settings: Settings
    +y_bus: Pandas DataFrame
    +y_bus_positive: Pandas DataFrame
    +y_bus_negative: Pandas DataFrame
    +y_bus_positive: Pandas DataFrame

    +add_bus(Bus)
    +add_transformer(Transformer)
    +add_geometry(Geometry)
    +add_conductor(Conductor)
    +add_transmission_line(TransmissionLine)
    +add_load(Load)
    +add_generator(Generator)
    +calc_y_bus_no_gen(): Pandas DataFrame
    +calc_y_bus_positive(): Pandas DataFrame
    +calc_y_bus_negative(): Pandas DataFrame
    +calc_y_bus_zero(): Pandas DataFrame
    +print_y_bus(str = "")
    }

class Bus {
    +name: str
    +base_kv: float
    +numBus: int
    +index: int
    +bus_type: str
    +v_pu: float = 1.0
    +delta: float = 0.0

    +set_bus_type()
    +set_bus_V(bus_v: float)
    +set_bus_delta(bus_angle: float)
    }

class Bundle {
    +name: str
    +spacing: float
    +conductor: Conductor
    +num_conductors: float
    +resistance: float
    +DSL: float
    +DSC: float

    +calculate_DSL(): float
    +calculate_DSC(): float
    }

class Conductor {
    +name: str
    +diameter: float
    +GMR: float
    +resistance: float
    +amp: float
    +radius: float
    }

class Generator {
    +name: str
    +voltage_setpoint: float
    +mw_setpoint: float
    +bus: Bus
    +settings: Settings
    +grounding_x: float = 0.0
    +x1: float
    +x2: float
    +x0: float
    +grounded: Bool
    }

class Geometry{
    +name: str
    +xa: float
    +ya: float
    +xb: float
    +yb: float
    +xc: float
    +yc: float
    +Dab: float
    +Dbc: float
    +Dca: float
    +Deq: float

    +calculate_Deq(): float
    }

class Load{
    +name: str
    +bus: Bus
    +settings: Settings
    +reactive_pwr: float
    +real_pwr: float
    }

class Settings{
    +f(float) = 60
    +s_base(float) = 100
}

class Transformer {
    +name: str
    +bus1: Bus
    +bus2: Bus
    +power_rating: float
    +impedance_percent: float
    +x_over_r_ratio: float
    +connection_type: str = y-y
    +grounding_x = 0.0
    +settings: Settings
    +z: complex
    +y: complex
    +x: float
    +r: float
    +z_pu: complex
    +y_pu: complex
    +r_pu: float
    +x_pu: float
    +y_prim_positive: Pandas DataFrame
    +y_prim_negative: Pandas DataFrame
    +y_prim_zero: Pandas DataFrame
    +matrix: Dict[str, complex]

    +calc_y_prim_positive(): Pandas DataFrame
    +calc_y_prim_negative(): Pandas DataFrame
    +calc_y_prim_zero(): Pandas DataFrame
    +print_y_prim(int = 1)
    }

class TransmissionLine {
    +name: str
    +bus1: Bus
    +bus2: Bus
    +bundle: Bundle
    +geometry: Geometry
    +length: float
    +z_base: float
    +y_base: float
    +z: complex
    +r: float
    +x: complex
    +r_pu: float
    +x_pu: complex
    +y_pu: complex
    +y_shunt: complex
    +y_series: complex
    +y_series_pu: complex
    +y_shunt_pu: complex
    +y_prim_positive: Pandas DataFrame
    +y_prim_negative: Pandas DataFrame
    +y_prim_zero: Pandas DataFrame
    +matrix: Dict[str, complex]

    +calc_y_prim(): List[complex]
    +print_y_prim()
    }

class Solution {
    +circuit: Circuit
    +known_power: NumPy array
    +power: NumPy array
    +mismatch: NumPy array
    +jacob: Jacobian
    +j_matrix: NumPy array
    +solutionVect: NumPy array
    +calcPQ: NumPy array
    +knownPQ: NumPy array
    +initSol: NumPy array
    +slack_name: int
    +pv_name: int
    +y_bus_positive_matrix: NumPy array
    +y_bus_negative_matrix: NumPy array
    +y_bus_zero_matrix: NumPy array
    +z_bus_positive: NumPy array
    +z_bus_negative: NumPy array
    +z_bus_zero: NumPy array

    +calc_known_power():
    +make_power_mismatch(): NumPy array
    +make_solution_vector(): NumPy array
    +calc_solution(): NumPy array
    +calc_jacobian(): NumPy array
    +print_jacobian()
    }

class Jacobian {
    +circuit: Circuit
    +y_bus: NumPy array
    +slackI: int
    +pvI: int
    +j1: NumPy array
    +j2: NumPy array
    +j3: aNumPy array
    +j4: NumPy array
    +j_matrix: NumPy array
    +j_df: Pandas DataFrame

    +find_buses()
    +calc_j1(): NumPy array
    +calc_j2(): NumPy array
    +calc_j3(): NumPy array
    +calc_j4(): NumPy array
    +calc_jacobian(): NumPy array
    +print_jacobian()
    }

class Fault{
    +circuit: Circuit
    +Z_bus_positive: NumPy array
    +Z_bus_negative: NumPy array
    +Z_bus_zero: NumPy array
    +z_bus: NumPy array
    +y_bus_matrix_positive: NumPy array
    +y_bus_matrix: NumPy array
    +y_bus_matrix_negative: NumPy array
    +y_bus_matrix_zero: NumPy array
    +slack_name: str
    +pv_name: str

    +calc_3_phase_bal(fault_bus: str, fault_v: float = 1.0): NumPy array, complex
    +print_fault_voltages()
    +calc_single_line_to_ground(fault_bus: str, fault_v: float = 1.0, Zf: float = 0.0)
    +calc_line_to_line(fault_bus: str, Zf: float = 0)
    +calc_double_line_to_ground(fault_bus: str, Zf: float = 0)
    +calc_fault_voltages(Vf: float, Z0: complex, Z1: complex, Z2: complex, I0: complex, I1: complex, I2: complex): NumPy Array
    +sequence_to_phase(sequence: List): NumPy array
}


Circuit *-- Transformer
Circuit *-- Bus
Circuit *-- TransmissionLine
Circuit *-- Geometry
Circuit *-- Conductor
Circuit *-- Settings
Circuit *-- Load
Circuit *-- Generator

TransmissionLine *-- Geometry
TransmissionLine *-- Bundle
TransmissionLine *-- Bus
TransmissionLine *-- Settings

Bundle *-- Conductor

Transformer *-- Settings
Transformer *-- Bus

Solution *-- Circuit
Solution *-- Jacobian

Jacobian *-- Circuit

Generator *-- Bus
Generator *-- Settings

Load *-- Bus
Load *-- Settings

Fault *-- Circuit




@enduml