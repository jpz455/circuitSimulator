@startuml
'https://plantuml.com/class-diagram

skinparam ClassBackgroundColor #PaleTurquoise

class Circuit{
    +name: str
    +buses: Dict[str, Bus]
    +transformers: Dict[str, Transformer]
    +geometries: Dict[str, Geometry]
    +conductors: Dict[str, Conductor]
    +transmission_lines: Dict[str, TransmissionLine]
    +loads: Dict[str, Load]
    +generators: Dict[str, Generator]
    +settings: Settings
    +y_bus: DataFrame

    +add_bus(Bus)
    +add_transformer(Transformer)
    +add_geometry(Geometry)
    +add_conductor(Conductor)
    +add_transmission_line(TransmissionLine)
    +add_load(Load)
    +add_generator(Generator)
    +calc_y_bus(): DataFrame
    +print_y_bus()
    }

class Bus {
    +name: str
    +base_kv: float
    +numBus: float
    +index: float
    +bus_type: str
    +v_pu: float = 1.0
    +delta: float = 0.0

    +set_bus_type()
    }

class Bundle {
    +name: str
    +spacing: float
    +conductor: Conductor
    +num_conductors: float
    +resistance: float
    +DSL: float
    +DSC: float

    +calculate_DSL(): float
    +calculate_DSC(): float
    }

class Conductor {
    +name: str
    +diameter: float
    +GMR: float
    +resistance: float
    +amp: float
    +radius: float
    }

class Generator {
    +name: str
    +diameter: float
    +GMR: float
    +resistance: float
    +amp: float
    +radius: float
    }

class Geometry{
    +name: str
    +xa: float
    +ya: float
    +xb: float
    +yb: float
    +xc: float
    +yc: float
    +Dab: float
    +Dbc: float
    +Dca: float
    +Deq: float

    +calculate_Deq(): float
    }

class Load{
    +name: str
    +bus: Bus
    +settings: Settings
    +reactive_pwr: float
    +real_pwr: float
    }

class Settings{
    +f(float) = 60
    +s_base(float) = 100
}

class Transformer {
    +name: str
    +bus1: Bus
    +bus2: Bus
    +power_rating: float
    +impedance_percent: float
    +x_over_r_ratio: float
    +settings: Settings
    +z: complex
    +y: complex
    +x: float
    +r: float
    +z_pu: complex
    +y_pu: complex
    +r_pu: float
    +x_pu: float
    +y_prim: List[complex]
    +matrix: Dict[str, complex]

    +calc_y_prim(): List[complex]
    +print_y_prim()
    }

class TransmissionLine {
    +name: str
    +bus1: Bus
    +bus2: Bus
    +bundle: Bundle
    +geometry: Geometry
    +length: float
    +settings: Settings
    +z_base: float
    +y_base: float
    +z: complex
    +r: float
    +x: float
    +r_pu: float
    +x_pu: float
    +y_pu: complex
    +y_shunt: complex
    +y_series: complex
    +y_series_pu: complex
    +y_shunt_pu: complex
    +y_prim: List[complex]
    +matrix: Dict[str, complex]

    +calc_y_prim(): List[complex]
    +print_y_prim()
    }

class Solution {
    +circuit: Circuit

    +compute_power_injection(Bus, array, array): array, array
}


Circuit *-- Transformer
Circuit *-- Bus
Circuit *-- TransmissionLine
Circuit *-- Geometry
Circuit *-- Conductor
Circuit *-- Settings
Circuit *-- Load
Circuit *-- Generator

TransmissionLine *-- Geometry
TransmissionLine *-- Bundle
TransmissionLine *-- Bus
TransmissionLine *-- Settings

Bundle *-- Conductor

Transformer *-- Settings
Transformer *-- Bus

Solution *-- Circuit








@enduml