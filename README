Project 3 Enhancement: Graphical User Interface (GUI) for Power Flow Solver
🛠️ Enhancement Overview
The enhancement I developed for Project 3 is a Graphical User Interface (GUI) for the Newton-Raphson power flow solver. This GUI leverages the modular design of the backend solver and provides a more user-friendly and intuitive experience for system creation and simulation.

Each component within the solver — such as buses, transformers, conductors, geometries, bundles, transmission lines, loads, and generators — has dedicated input fields where users can specify the necessary characteristics (e.g., transmission line length, load MW and MVar, generator voltage setpoints).
Once the system is fully constructed, the Run Power Flow button executes the backend solver, displaying final bus voltages and angles in a formatted output window.

🎯 Purpose
After working with the backend power flow solver purely through hard-coded main.py files, it became clear that manually entering system setups demanded high attention to detail and was prone to errors.
The purpose of the GUI enhancement is to:

Improve user experience by allowing users to build the system interactively.

Reduce user error by providing structured input fields.

Streamline system creation by allowing users to add components through button clicks rather than manual Python code.

Enhance usability for users with less coding experience.

This GUI enables users to build even complex systems faster and more accurately compared to writing manual input scripts.

📥 Inputs and 📤 Outputs
Inputs
Inputs are entered into textboxes and radio buttons in the GUI.

Typical inputs include:

Bus: Name (e.g., bus1), Base kV, Bus Type (PQ, PV, Slack)

Transformer: Bus names, impedance, X/R ratio, connection type

Conductor: Diameter, GMR, resistance, ampacity

Geometry: Coordinates for phase conductors

Bundle: Number of conductors, spacing

Transmission Line: Start bus, end bus, length

Load: Associated bus, real power (P), reactive power (Q)

Generator: Bus, voltage setpoint, reactances (X1, X2, X0), grounding impedance

Note: All bus names must follow the format busX, generators as Gen X, and loads as loadX to match backend dictionary keys.

Outputs
System setup log

Validation messages (e.g., missing buses, invalid inputs)

Final bus voltage magnitudes and phase angles

Newton-Raphson solver convergence status and iteration count

Intermediate outputs such as Y-bus matrix summaries, known powers, Jacobian setup (in the output box)

📚 References
Used ChatGPT to learn how to build and organize a Tkinter GUI for modular component addition.

Backend Newton-Raphson method based on:

J. D. Glover, M. S. Sarma, T. J. Overbye, Power System Analysis and Design, 6th Ed., Cengage Learning, 2016.

Hadi Saadat, Power System Analysis, 2nd Ed., McGraw-Hill, 2002.

🚀 Instructions for Running and Testing
Setup
Download or clone the repository branch containing the GUI files and all backend modules (Settings.py, Circuit.py, Bus.py, etc.).

Open a terminal window (Mac/Linux) or command prompt (Windows).

Running the Program
Instead of pressing "Run" inside PyCharm, type the following command manually into the terminal:

bash
Copy
Edit
python3 GUI.py
This will launch the interactive GUI window.
Important: Full-screen the window to access all input sections easily.

Building the System
Start by initializing the system (system name, base frequency, and power base).

Add each component by filling out the input fields and pressing the corresponding button.

Always add at least one Slack bus before running power flow.

Once your system is built, click the "Run Power Flow" button to compute the voltages and angles.

Key Assumptions
Only one Bundle and one Geometry are primarily used by default.

Transmission lines use the last-added bundle and last-added geometry automatically.

Multiple bundles and geometries can be created but the latest entry will be used unless manually customized further.

📸 Validation Cases
✅ Case 1: Test Case 1 — 7-Bus System (Slack, Loads, and Generators)
System Setup:

7 buses total

One Slack Bus (bus1, 20 kV)

Five PQ buses (buses 2–6, 230 kV)

One PV bus (bus7, 18 kV)

Two transformers

Loads and generators distributed across buses

Input Setup Screenshot:

GUI Power Flow Output:

Final Bus Voltages (GUI Computed):

Validation Against External Tool:

✏️ Observations:
GUI solution matches external validation bus-by-bus to 4 decimal places.

Power flow converged in 9 iterations.

Slack bus maintained exactly at 1.0 pu.

Voltage angles agree within ~0.1°.

✅ Case 2: Test Case 2 — 7-Bus System (Different Configuration)
System Setup:

7 buses total

One Slack Bus (bus1, 13.8 kV)

Other buses at 345 kV and 20 kV

Two transformers

Different load and generator distribution compared to Case 1

Input Setup Screenshot:

GUI Power Flow Output:

Final Bus Voltages (GUI Computed):

Validation Against External Tool:

System Diagram:

✏️ Observations:
GUI solver converged successfully in 11 iterations.

Voltage magnitudes and angles matched external validation outputs.

Slack bus and generator control verified correctly.

🧠 Summary of Validation

Case	Number of Buses	Convergence	Validation Accuracy
1	7	9 iterations	Matched to 4 decimals
2	7	11 iterations	Matched to 4 decimals
✅ Both systems validate that the GUI, backend solver, and Newton-Raphson implementation work correctly.

📋 Final Notes
Minor differences (<0.01%) may exist due to numerical rounding or solver tolerances.

Correct formatting for bus names (busX), loads (loadX), and generators (Gen X) must be followed.

GUI assumes use of the latest-added bundle and geometry unless customized.

📁 Organizing Screenshots
Recommended screenshot folder structure:

bash
Copy
Edit
/screenshots/
    test_case_1_GUI_init.pdf
